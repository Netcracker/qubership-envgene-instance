name: "Download artifact"
description: "Get artifact id, download it and unzip to required directory"
author: "Qubership"

inputs:
  sanitized_name:
    description: "Updated environment name without special symbols."
    required: true
    type: string
  full_env:
    description: "Full environment name."
    required: true
    type: string
  project_dir:
    description: "Workspace."
    required: true
    type: string

outputs:
  artifact_id:
    description: "The ID of the matched artifact"
    value: ${{ steps.get-artifact.outputs.artifact_id }}

runs:
  using: "composite"
  steps:
    - name: Download artifact using standard GitHub action
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.sanitized_name }}
        path: ./downloaded_artifact

    - name: Extract and copy artifact contents
      shell: bash
      run: |
        echo "=== Downloaded artifact contents ==="
        ls -la ./downloaded_artifact
        
        echo "=== Full directory tree of downloaded artifact ==="
        find ./downloaded_artifact -type f | head -20
        
        # Check if env_definition.yml exists in artifact
        if [ -f "./downloaded_artifact/${{ inputs.full_env }}/Inventory/env_definition.yml" ]; then
          echo "=== Found env_definition.yml in artifact ==="
          echo "Content in artifact:"
          cat "./downloaded_artifact/${{ inputs.full_env }}/Inventory/env_definition.yml"
        else
          echo "=== env_definition.yml not found in expected location ==="
          echo "Looking for env_definition.yml anywhere in artifact..."
          find ./downloaded_artifact -name "env_definition.yml" -exec echo "Found at: {}" \; -exec cat {} \;
        fi
        
        # Find the environment directory in downloaded artifact
        ENV_DIR="./downloaded_artifact/${{ inputs.full_env }}"
        if [ -d "$ENV_DIR" ]; then
          echo "Found environment directory: $ENV_DIR"
          echo "Contents of environment directory:"
          find "$ENV_DIR" -type f | head -10
          
          # Show destination before copy
          echo "=== Destination BEFORE copy ==="
          if [ -f "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml" ]; then
            echo "Current content in destination:"
            cat "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml"
          else
            echo "env_definition.yml not found in destination"
          fi
          
          # Ensure destination directory exists
          mkdir -p "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/"
          
          echo "Copying files to destination..."
          echo "Source: $ENV_DIR"
          echo "Destination: ${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/"
          
          # Copy files recursively, overwriting existing ones
          cp -rf "$ENV_DIR"/* "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/"
          echo "Copy command completed with exit code: $?"
          
          # Show destination after copy
          echo "=== Destination AFTER copy ==="
          if [ -f "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml" ]; then
            echo "Content in destination after copy:"
            cat "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml"
          else
            echo "env_definition.yml still not found in destination after copy"
          fi
          
          # Show what was copied
          echo "=== Files in destination after copy ==="
          find "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}" -name "*.yml" -o -name "*.yaml" | head -5
          
        else
          echo "Environment directory '${{ inputs.full_env }}' not found in artifact"
          echo "Artifact contains files directly in root - using alternative copy method"
          
          # Show destination before copy
          echo "=== Destination BEFORE copy (root method) ==="
          if [ -f "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml" ]; then
            echo "Current content in destination:"
            cat "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml"
          else
            echo "env_definition.yml not found in destination"
          fi
          
          # Ensure destination directory exists
          mkdir -p "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/"
          
          echo "Copying files from artifact root to destination..."
          echo "Source: ./downloaded_artifact/*"
          echo "Destination: ${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/"
          
          # Copy files from artifact root, overwriting existing ones
          cp -rf ./downloaded_artifact/* "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/"
          echo "Copy command completed with exit code: $?"
          
          # Show destination after copy
          echo "=== Destination AFTER copy (root method) ==="
          if [ -f "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml" ]; then
            echo "Content in destination after copy:"
            cat "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml"
            
            echo "=== Checking for version 0.0.2 after copy ==="
            if grep -q "0.0.2" "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}/Inventory/env_definition.yml"; then
              echo "✅ Version 0.0.2 successfully copied from artifact"
            else
              echo "❌ Version 0.0.2 still not found after copy"
            fi
          else
            echo "env_definition.yml still not found in destination after copy"
          fi
          
          # Show what was copied
          echo "=== Files in destination after copy (root method) ==="
          find "${{ inputs.project_dir }}/environments/${{ inputs.full_env }}" -name "*.yml" -o -name "*.yaml" | head -5
        fi
        
        # Clean up
        rm -rf ./downloaded_artifact