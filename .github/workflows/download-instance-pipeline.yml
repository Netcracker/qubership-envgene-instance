name: Install Instance Pipeline

run-name: "Install Instance Pipeline from ${{ github.event.inputs.image_name || 'ghcr.io/netcracker/qubership-instance-repo-pipeline' }}:${{ github.event.inputs.image_tag || 'latest' }}"

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to pull'
        required: true
        default: 'latest'
      image_name:
        description: 'Docker image name'
        required: true
        default: 'ghcr.io/netcracker/qubership-instance-repo-pipeline'

jobs:
  update-pipelines:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Pull Docker image
        run: |
          IMAGE_NAME="${{ github.event.inputs.image_name || 'ghcr.io/netcracker/qubership-instance-repo-pipeline' }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          FULL_IMAGE="$IMAGE_NAME:$IMAGE_TAG"
          
          echo "üîÑ Pulling Docker image: $FULL_IMAGE"
          docker pull $FULL_IMAGE
          echo "‚úÖ Successfully pulled: $FULL_IMAGE"

      - name: Create temporary container
        id: create-container
        run: |
          IMAGE_NAME="${{ github.event.inputs.image_name || 'ghcr.io/netcracker/qubership-instance-repo-pipeline' }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          FULL_IMAGE="$IMAGE_NAME:$IMAGE_TAG"
          
          echo "üì¶ Creating temporary container from: $FULL_IMAGE"
          CONTAINER_ID=$(docker create $FULL_IMAGE)
          echo "container_id=$CONTAINER_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Container created with ID: $CONTAINER_ID"

      - name: Extract .github folder from container
        run: |
          echo "üìÇ Extracting .github folder from container..."
          docker cp ${{ steps.create-container.outputs.container_id }}:/opt/github ./
          docker rm ${{ steps.create-container.outputs.container_id }}
          echo "‚úÖ Extraction completed and container removed"

      - name: Check for changes and update files
        id: check-changes
        run: |
          IMAGE_NAME="${{ github.event.inputs.image_name || 'ghcr.io/netcracker/qubership-instance-repo-pipeline' }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          FULL_IMAGE="$IMAGE_NAME:$IMAGE_TAG"
          
          echo "üîç Checking for changes from Docker image: $FULL_IMAGE"
          
          if [ ! -d "./github" ]; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚ùå No .github folder found in Docker image: $FULL_IMAGE"
            exit 0
          fi
          
          # Create a temporary file to track changes
          touch /tmp/changes_detected
          
          # Function to compare and update files
          update_files() {
            local src_dir="$1"
            local dest_dir="$2"
            
            # Create destination directory if it doesn't exist
            mkdir -p "$dest_dir"
            
            # Find all files in source directory
            find "$src_dir" -type f | while read -r src_file; do
              # Calculate relative path
              rel_path="${src_file#$src_dir/}"
              dest_file="$dest_dir/$rel_path"
              
              # Create destination directory if needed
              mkdir -p "$(dirname "$dest_file")"
              
              # Check if file exists and is different
              if [ ! -f "$dest_file" ] || ! cmp -s "$src_file" "$dest_file"; then
                echo "Updating: $rel_path"
                cp "$src_file" "$dest_file"
                echo "changed" > /tmp/changes_detected
              fi
            done
          }
          
          # Update files from Docker image
          update_files "./github" ".github"
          
          # Check if any changes were made
          if [ -f /tmp/changes_detected ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected and applied to .github folder from: $FULL_IMAGE"
            rm /tmp/changes_detected
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes detected in .github folder from: $FULL_IMAGE"
          fi

      - name: Configure Git
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git add .github/
          git commit -m "Update pipelines from Docker image ${{ github.event.inputs.image_name || 'ghcr.io/netcracker/qubership-instance-repo-pipeline' }}:${{ github.event.inputs.image_tag || 'latest' }}"
          git push

      - name: Comment on PR (if triggered from PR)
        if: github.event_name == 'pull_request' && steps.check-changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Pipelines have been updated from Docker image!'
            })

      - name: No changes notification
        if: steps.check-changes.outputs.changes == 'false'
        run: |
          IMAGE_NAME="${{ github.event.inputs.image_name || 'ghcr.io/netcracker/qubership-instance-repo-pipeline' }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'latest' }}"
          echo "‚ÑπÔ∏è No changes detected in .github folder from Docker image: $IMAGE_NAME:$IMAGE_TAG" 
